<!DOCTYPE html>
<html>
<head>
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
	<style type="text/css">
		html { height: 100% }
		body { height: 100%; margin: 0; padding: 0 }
		#map-canvas { height: 100% }
	</style>
	<script type="text/javascript"
	src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA4uPhOH0Rb1gVg-LQXAqagjS4ptNV_OVc&sensor=true">
	</script>
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	<script>
		var socket = io.connect('http://localhost');
		socket.on('311 update', function(data){
			console.log(data);
		});
	</script>
	<script type="text/javascript">

		//Global variables
		var map;
		var markers = [];

		/* plot: records, icon
		Records: array of objects with lat/long properties
		icon: custom icon to plot
		Type: array of fields

		*/
		function plot(records, icon, type){
			var location;
			var marker;
			var infowindowcontent = '';
			var infowindow = new google.maps.InfoWindow({
				content: infowindowcontent, maxWidth: 300
			});
			for(record in records){
				location = new google.maps.LatLng(records[record].lat, records[record].long);

				marker = new google.maps.Marker({
					position: location,
					map: map,
					title: records[record].service_name,
					animation: google.maps.Animation.DROP
				});

				infowindowcontent = '<b>'
				+ records[record].service_name + "</b><br>"
				+ records[record].address + '<br>'
				+ records[record].requested_datetime+ '<br>';

				if(records[record].media_url!=null){
					infowindowcontent = infowindowcontent + '<img width="250px" src="' + records[record].media_url + '" />';
				}
				bindInfoWindow(marker, map, infowindow, infowindowcontent);
				markers.push(marker);
			}
		}
		function setAllMap(map) {
			for (var i = 0; i < markers.length; i++) {
				markers[i].setMap(map);
			}
		}

		// Removes the markers from the map, but keeps them in the array.
		function clearMarkers() {
			setAllMap(null);
		}

		// Shows any markers currently in the array.
		function showMarkers() {
			setAllMap(map);
		}

		// Deletes all markers in the array by removing references to them.
		function deleteMarkers() {
			clearMarkers();
			markers = [];
		}

		var bindInfoWindow = function(marker, map, infowindow, html) {
			google.maps.event.addListener(marker, 'click', function() {
				infowindow.setContent(html);
				infowindow.open(map, marker);
			});
		} 


		/* getData: url, type, field

		Given the URL and data type, returns the field in an array of objects

		Type can be one of
		* json
		* xml
		* jsonp

		Field is a string. If no string specified, the entire JSON from URL is returned.

		TODO: Implement getData for different data_types and field access.
		*/
		function getData(url, data_type){
			$.ajax({
				url: url,
				context: document.body,
				type: "GET",
				dataType: data_type,
				success: function(data){
					if(data != undefined){
						console.log("Data successfully obtained from " + url);
						plot(data,"icon");
					}
				},
				error: function(){
					console.log("Could not get data from " + url);
				}
			});
		}



		function initialize() {

			var mapOptions = {
				center: new google.maps.LatLng(43.7, -79.4),
				zoom: 12
			};

			map = new google.maps.Map(document.getElementById("map-canvas"),
				mapOptions);

			// Get 311 pot holes data every 5 minutes
			getData("http://" + window.location.host + "/data", "json", map, markers);
			var timerId = setInterval(function(){
				clearMarkers();
				deleteMarkers();
				getData("http://" + window.location.host + "/data", "json", map, markers);
			} ,  300000 ); //300000
		}
	google.maps.event.addDomListener(window, 'load', initialize);
</script>
</head>
<body>
	<div id="map-canvas"/>
</body>
</html>